generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password      String
  role          Role     @default(DEVELOPER)
  avatar        String?
  department    String?
  position      String?
  skills        String[]
  phone         String?
  isActive      Boolean  @default(true)
  lastLogin     DateTime?
  loginAttempts Int      @default(0)
  lockedUntil   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  assignedTasks Task[]        @relation("TaskAssignee")
  createdTasks  Task[]        @relation("TaskCreator")
  projects      Project[]     @relation("ProjectMembers")
  managedProjects Project[]   @relation("ProjectManager")
  taskComments  TaskComment[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  progress    Int           @default(0)
  budget      Float?
  managerId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  manager     User   @relation("ProjectManager", fields: [managerId], references: [id])
  members     User[] @relation("ProjectMembers")
  tasks       Task[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  assigneeId  String?
  createdById String
  projectId   String
  dueDate     DateTime?
  startDate   DateTime?
  endDate     DateTime?
  progress    Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  assignee  User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy User          @relation("TaskCreator", fields: [createdById], references: [id])
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comments  TaskComment[]

  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_comments")
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  TEAM_LEAD
  DEVELOPER
  DESIGNER
  TESTER
  CLIENT
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
